
part function Adder_CLA(int n) {
    static assert(n > 0);

    public bit    carryIn;
    public bit[n] a,b;
    public bit[n] sum;
    public bit    g,p;

    static if (n == 1) {
        /* 1 bit adder.  Implement a Full Adder, except no carry-out */
        sum[0] = a[0] ^ b[0] ^ carryIn;
        g = a[0] & b[0];
        p = a[0] | b[0];
    }
    else static if (n%4 != 0)
    {
        /* if the size of this adder is not a multiple of 4, then use a
         * slightly larger adder (with dummy inputs on top) to evaluate
         * the code.
         */

        int ROUNDED = (n+3) & ~0x3;
        static assert(ROUNDED   >= n);
        static assert(ROUNDED%4 == 0);

        subpart Adder_CLA(ROUNDED) round_adder;
        round_adder.carryIn = carryIn;
        round_adder.a[:n ]  = a;
        round_adder.b[:n ]  = b;

        /* we're going to ignore the output for the extra bits.  But we set
         * a=1,b=0 for all of these bits so that the propagate/generate
         * output from this component is what we would have expected for n
         * bits.
         */
        round_adder.a[ n:]  = 1;
        round_adder.b[ n:]  = 0;

        sum = round_adder.sum[:n];
        g   = round_adder.g;
        p   = round_adder.p;
    }
    else
    {
        /* the size of the input is a multiple of 4 bits.  We'll break the
         * problem into 4 big chunks (NOTE: we have 4x(n/4) adders, *not*
         * (n/4)x4 adders.)  We'll then use the p/g bits of each one to
         * implement our carry lookahead logic.
         *
         * Note that when we think of things this way, 4x1 bit adders works
         * just as well as 4x16 bit adders; we just need to know the p/g bits
         * for each of the sub-adders
         */

        int SUB_WIDTH = n/4;
        static assert(n>0);
        subpart Adder_CLA(SUB_WIDTH)[4] sub_adders;

        /* connect slices of the inputs to the inputs of the sub-adders */
        for (i; 0..4) {
            sub_adders[i].a = a[i*SUB_WIDTH : i*SUB_WIDTH+4];
            sub_adders[i].b = b[i*SUB_WIDTH : i*SUB_WIDTH+4];
        }

        /* these are just copies of the g/p bits from the sub-adders.  This
         * just makes them a little less annoying to read, by making the
         * variable names shorter.
         */
        bit[4] sub_g,sub_p;
        for (i; 0..4) {
            sub_g[i] = sub_adders[i].g;
            sub_p[i] = sub_adders[i].p;
        }

        /* calculate our own generate,popagate *OUTPUTS* */
        g =                                  sub_g[3] |
                                  sub_p[1] & sub_g[2] |
                       sub_p[2] & sub_p[1] & sub_g[1] |
            sub_p[3] & sub_p[2] & sub_p[1] & sub_g[0];
        p = sub_p[0] & sub_p[1] & sub_p[2] & sub_p[3];

        /* calculate the carry-in to each of the sub-adders */
        sub_adders[0].carryIn = carryIn;
        sub_adders[1].carryIn = sub_g[0] |
                                sub_p[0] & carryIn;
        sub_adders[2].carryIn = sub_g[1] |
                                sub_p[1] & sub_g[0] |
                                sub_p[0] & carryIn;
        sub_adders[3].carryIn = sub_g[2] |
                                sub_p[2] & sub_g[1] |
                                sub_p[2] & sub_p[1] & sub_g[0] |
                                sub_p[2] & sub_p[1] & sub_p[0] & carryIn;

        /* calculate the sum bits, copying from the sub-adders to the output.
         * Advanced HWC programmers will point out that it was perfectly legal
         * to make these connections in the first for() loop, and they are
         * right; order of connections doesn't matter for correctness.  But I
         * think that writing the code this way makes it more readable for
         * humans.
         */
        for (i; 0..4)
            sum[i*SUB_WIDTH : i*SUB_WIDTH+4] = sub_adders[i].sum;
    }
}



part main
{
    subpart Adder_CLA( 4) adder4;
    subpart Adder_CLA( 8) adder8;
    subpart Adder_CLA(16) adder16;
    subpart Adder_CLA(32) adder32;
    subpart Adder_CLA(64) adder64;
}

