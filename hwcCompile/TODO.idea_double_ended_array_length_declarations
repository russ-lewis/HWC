RETHINK

I originally wrote the text at the bottom of this document, but I realized
in time that it was a bad idea.  Too much code (including my own habits)
use len() as a function to find the last index of an array...having nonzero
starting indices is just going to lead to bugs.

Not to mention, what happens when you slice an array?  Does the slice start
with index 0 or not?  What if the original array didn't start with zero?

So I have an ugly (?) but simple solution: ban named for() loops, if the
starting index is nonzero.  That is, you have for() loops which start at
nonzero, but you cannot name them.  So problem solved!

And if a user *really* insists on a nonzero start index, tell them to do
the following:
  for (i; 0..256) as this_is_ugly
    if (i >= 128)
    {  ... code ... }

-----------------

When I added the named for() loop syntax
    for (int i; 0..32) as adder_loop { ... }
I very quickly realized that I would have to implement array expressions where
the array didn't start at zero.  This was obvious for certain for() loops
    for (int j; 4..8) as whatever { ... }
but also would be necessary in order to implement slicing:
    bit[32] a,b;
    a[:16] = b[16:];

So I just thought to myself, why should I limit myself to arrays that have
zero-based indices?  Why not allow slicing-like syntax for array declarations,
like this:
    bit[4:8] something;

And of course, since for() loops might reasonably use negative indices
sometimes, the language just begs for generality:
    bit[-16:16] thirty_two_bits;

(BTW, I'm thinking that if I add this, I'm almost *certainly* going to want
to change the for() loop internal operator from .. to a colon.)

