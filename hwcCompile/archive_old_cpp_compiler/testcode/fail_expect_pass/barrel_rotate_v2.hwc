part main
{
	public bit[32] in;
	public bit[5]  shamt;   // amount to rotate *LEFT*
	public bit[32] out;

        // double the input, minus duplicate of bottom bit
	bit[63] tmp0 = in :: in[:-1];

	bit[62] tmp1;           // after (maybe) shift 1 (30 left to discard)
	bit[60] tmp2;           // after (maybe) shift 2 (28 left to discard)
	bit[56] tmp3;           // after (maybe) shift 4 (24 left to discard)
	bit[48] tmp4;           // after (maybe) shift 8 (16 left to discard)

	// shall we shift by 1, or not?
	if (shamt[0])
		tmp1 = tmp0[:-1];
	else
		tmp1 = tmp0[1:];

	if (shamt[1])
		tmp2 = tmp1[:-2];
	else
		tmp2 = tmp1[2:];

	if (shamt[2])
		tmp3 = tmp2[:-4];
	else
		tmp3 = tmp2[4:];

	if (shamt[3])
		tmp4 = tmp3[:-8];
	else
		tmp4 = tmp3[8:];

	if (shamt[4])
		out = tmp4[:-16];
	else
		out = tmp4[16:];
}

