---- DEBUG: DUMPING PARSE TREE ----
File with the following decls: 
  File_decl with these decls: 
    Part_decl: named 'simple_if', with stmts: 
      stmt: DECL:
        type:
          "bit"
        prefix=public
        isMemory=0
        name: control
      stmt: DECL:
        type:
          "bit"
        prefix=public
        isMemory=0
        name: in
      stmt: DECL:
        type:
          "bit"
        prefix=public
        isMemory=0
        name: out
      stmt: IF CHECK
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: IDENT, name = control
          RHand:
            Expr: NUM, value of 0
        stmt: CONNECTION, with left and right exprs:
          Expr: IDENT, name = out
          Expr: ARR, into array expr
            Expr: IDENT, name = in
           index of
            Expr: NUM, value of 0
  File_decl with these decls: 
    Part_decl: named 'main', with stmts: 
      stmt: DECL:
        type:
          Expr: IDENT, name = simple_if
        prefix=subpart
        isMemory=0
        name: a
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = a
           accessing field 'in'
         index of
          Expr: NUM, value of 0
        Expr: NUM, value of 0
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = a
           accessing field 'in'
         index of
          Expr: NUM, value of 1
        Expr: NUM, value of 0
      stmt: CONNECTION, with left and right exprs:
        Expr: DOT, using expr
          Expr: IDENT, name = a
         accessing field 'control'
        Expr: NUM, value of 0
      stmt: ASSERTION
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: DOT, using expr
              Expr: IDENT, name = a
             accessing field 'out'
          RHand:
            Expr: NUM, value of 0
      stmt: DECL:
        type:
          Expr: IDENT, name = simple_if
        prefix=subpart
        isMemory=0
        name: b
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = b
           accessing field 'in'
         index of
          Expr: NUM, value of 0
        Expr: NUM, value of 0
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = b
           accessing field 'in'
         index of
          Expr: NUM, value of 1
        Expr: NUM, value of 0
      stmt: CONNECTION, with left and right exprs:
        Expr: DOT, using expr
          Expr: IDENT, name = b
         accessing field 'control'
        Expr: NUM, value of 1
      stmt: ASSERTION
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: DOT, using expr
              Expr: IDENT, name = b
             accessing field 'out'
          RHand:
            Expr: NUM, value of 0
      stmt: DECL:
        type:
          Expr: IDENT, name = simple_if
        prefix=subpart
        isMemory=0
        name: c
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = c
           accessing field 'in'
         index of
          Expr: NUM, value of 0
        Expr: NUM, value of 0
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = c
           accessing field 'in'
         index of
          Expr: NUM, value of 1
        Expr: NUM, value of 1
      stmt: CONNECTION, with left and right exprs:
        Expr: DOT, using expr
          Expr: IDENT, name = c
         accessing field 'control'
        Expr: NUM, value of 0
      stmt: ASSERTION
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: DOT, using expr
              Expr: IDENT, name = c
             accessing field 'out'
          RHand:
            Expr: NUM, value of 0
      stmt: DECL:
        type:
          Expr: IDENT, name = simple_if
        prefix=subpart
        isMemory=0
        name: d
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = d
           accessing field 'in'
         index of
          Expr: NUM, value of 0
        Expr: NUM, value of 0
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = d
           accessing field 'in'
         index of
          Expr: NUM, value of 1
        Expr: NUM, value of 1
      stmt: CONNECTION, with left and right exprs:
        Expr: DOT, using expr
          Expr: IDENT, name = d
         accessing field 'control'
        Expr: NUM, value of 1
      stmt: ASSERTION
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: DOT, using expr
              Expr: IDENT, name = b
             accessing field 'out'
          RHand:
            Expr: NUM, value of 1
      stmt: DECL:
        type:
          Expr: IDENT, name = simple_if
        prefix=subpart
        isMemory=0
        name: e
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = e
           accessing field 'in'
         index of
          Expr: NUM, value of 0
        Expr: NUM, value of 1
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = e
           accessing field 'in'
         index of
          Expr: NUM, value of 1
        Expr: NUM, value of 0
      stmt: CONNECTION, with left and right exprs:
        Expr: DOT, using expr
          Expr: IDENT, name = e
         accessing field 'control'
        Expr: NUM, value of 0
      stmt: ASSERTION
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: DOT, using expr
              Expr: IDENT, name = e
             accessing field 'out'
          RHand:
            Expr: NUM, value of 1
      stmt: DECL:
        type:
          Expr: IDENT, name = simple_if
        prefix=subpart
        isMemory=0
        name: f
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = f
           accessing field 'in'
         index of
          Expr: NUM, value of 0
        Expr: NUM, value of 1
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = f
           accessing field 'in'
         index of
          Expr: NUM, value of 1
        Expr: NUM, value of 0
      stmt: CONNECTION, with left and right exprs:
        Expr: DOT, using expr
          Expr: IDENT, name = f
         accessing field 'control'
        Expr: NUM, value of 1
      stmt: ASSERTION
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: DOT, using expr
              Expr: IDENT, name = f
             accessing field 'out'
          RHand:
            Expr: NUM, value of 0
      stmt: DECL:
        type:
          Expr: IDENT, name = simple_if
        prefix=subpart
        isMemory=0
        name: g
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = g
           accessing field 'in'
         index of
          Expr: NUM, value of 0
        Expr: NUM, value of 1
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = g
           accessing field 'in'
         index of
          Expr: NUM, value of 1
        Expr: NUM, value of 1
      stmt: CONNECTION, with left and right exprs:
        Expr: DOT, using expr
          Expr: IDENT, name = g
         accessing field 'control'
        Expr: NUM, value of 0
      stmt: ASSERTION
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: DOT, using expr
              Expr: IDENT, name = g
             accessing field 'out'
          RHand:
            Expr: NUM, value of 1
      stmt: DECL:
        type:
          Expr: IDENT, name = simple_if
        prefix=subpart
        isMemory=0
        name: h
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = h
           accessing field 'in'
         index of
          Expr: NUM, value of 0
        Expr: NUM, value of 1
      stmt: CONNECTION, with left and right exprs:
        Expr: ARR, into array expr
          Expr: DOT, using expr
            Expr: IDENT, name = h
           accessing field 'in'
         index of
          Expr: NUM, value of 1
        Expr: NUM, value of 1
      stmt: CONNECTION, with left and right exprs:
        Expr: DOT, using expr
          Expr: IDENT, name = h
         accessing field 'control'
        Expr: NUM, value of 1
      stmt: ASSERTION
        Expr: TWOOP of mode EQUALS with exprs
          LHand:
            Expr: DOT, using expr
              Expr: IDENT, name = h
             accessing field 'out'
          RHand:
            Expr: NUM, value of 1

rc=0
