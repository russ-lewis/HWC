part main
{
	public bit[32] a,b;
	public bit     bNegate;
	public bit[2]  operation;

	public bit[32] result;
	public bit     overflow;
	public bit     zero;

	ALUElement aluElems[32];


	// inputs a,b
	for (i; 0..32)
	{
		alu[i].a = a[i];
		alu[i].b = b[i];
	}


	// carry-in bits
	alu[0].carryIn = bNegate;
	for (i: 1..32)
		alu[i].carryIn = alu[i-1].carryOut;


	// 'less' inputs
	alu[0].less = alu[31].set;
	for (i: 1..32)
		alu[i].less = 0;


	// control bits
	for (i: 0..32)
	{
		alu[i].bInvert   = bNegate;
		alu[i].operation = operation;
	}


	// output bits
	for (i: 0..32)
		result[i] = alu[i].result;

	overflow = (a[31] == b[31]) & (result[31] != a[31]);
	zero     = (result == 0);
}


part ALUElement
{
	public bit    a,b,carryIn;
	public bit    bInvert;
	public bit[2] operation;

	public bit result;
	public bit set;          // output from the adder


	// this is the bInvert MUX.  It's internal only.
	bit bX = (b ^ bInvert);


	// calculate the add result - which both needs to be delivered as the
	// 'set' value, and also (if operation==2) the result
	set = a ^ bX ^ carryIn;


	// this is the output MUX
	if (i == 0)
		result = a & b;
	else if (i == 1)
		result = a | b;
	else if (i == 2)
		result = set;
	else
		result = less;
}

