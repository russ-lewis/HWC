// +------------------------------------------------------------+
// | This code models the picture of the CPU in the book; as    |
// | we move down through the code, we are moving left-to-right |
// | in the diagram.                                            |
// |                                                            |
// | In each "column" of the diagram, we move strictly          |
// | top-to-bottom.                                             |
// +------------------------------------------------------------+


from adder import adder32_func;
from alu   import ALU;


// configure constants
int INST_MEM_SIZE =  256;
int DATA_MEM_SIZE = 4096;



part main
{
	// program counter.  Simulator must decide on a default - although 0
	// might be a reasonable choice.
	memory(bit[32]) PC;


	// PC+4 adder
	bit[32] pcPlus4 = adder32_func(PC,4);

	// instruction memory.  Must be initialized to nonzero by the simulator.
	memory([32][INST_MEMORY_SIZE/4]) instMem;

	// read the instruction.
	assert(PC % 4 == 0);
	bit[32] inst = instMem[PC/4];

	// fields of the instruction
	bit[ 6] opcode = inst[26:  ];
	bit[ 5] rs     = inst[21:26];
	bit[ 5] rt     = inst[16:21];
	bit[ 5] rd     = inst[11:16];
	bit[ 5] shamt  = inst[ 6:11];
	bit[ 6] funct  = inst[  : 6];
	bit[16] imm16  = inst[  :16];
	bit[26] jAddr  = inst[  :26];


	// bottom 28 bits of a jump address
	bit[28] j28 = jAddr ~ 0b00;

	// top 28 bits
	bit[4]  jTop4 = pcPlus4[-4:];

	// complete jump address
	bit[32] jDest = j28 ~ jTop4;

	// control bits
	bit    regDst;
	flag   jump;
	flag   branch;
	flag   memRead;
	flag   memToReg;
	bit[2] ALUOp;
	       int ALU_AND  = 0;
	       int ALU_OR   = 1;
	       int ALU_ADD  = 2;
	       int ALU_LESS = 3;
	bit    bInvert;
	flag   memWrite;
	bit    ALUsrc;
	flag   regWrite;

	flag   unsupportedInst;
	flag   instDecodeErr;

	if (opcode == 2)   // J
	{
		// regDst, ALUOp, bInvert, ALUsrc: don't care
		jump = 1;
	}
	else if (opcode == 3)   // JAL
	{
		unsupportedInst = 1;
	}
	else if (opcode == 4)   // BEQ
	{
		ALUOp   = ALU_ADD;
		bInvert = 1;        // subtract

		branch = 1;
	}
	else if (opcode == 5)   // BNE
	{
		unsupportedInst = 1;
	}
	else if (opcode == 8)   // ADDI
	{
		unsupportedInst = 1;       // we don't have an overflow feature
	}
	else if (opcode == 9)   // ADDIU
	{
		ALUsrc  = 1;               // immediate field
		ALUOp   = ALU_ADD;
		bInvert = 0;

		regWrite = 1;              // use rt as the detination register
		regDst   = 0;
	}
	else
		instDecodeErr = 1;

	RegisterFile regs;
	regs.readReg1 = rs;
	regs.readReg2 = rt;

	bit[32] imm32signExtend;
	imm32signExtend[:16] = imm16;
	for (i; 16..32)
		imm32signExtend[i] = imm16[-1];


	// calculate branch address
	bit[32] branchOffset = imm32signExtend<<2;
	bit[32] branchDest   = adder32_func(pcPlus4, branchOffset);

	// ALU sources
	bit[32] aluInput1 = regs.readReg1;
	bit[32] aluInput2;
	if (aluSrc == 0)
		aluInput2 = regs.readReg2;
	else
		aluInput2 = imm32signExtend;

	// the ALU itself
	ALU alu;
	alu.a = aluInput1;
	alu.b = aluInput2;
	alu.bInvert = bInvert;
	alu.operation = ALUOp;


	// calculate the new PC.  J trumps everything else.
	if (jump)
		PC = jDest;
	if (branch & alu.zero)
		PC = branchDest;
	else
		PC = pcPlus4;

	DataMemory dataMem;
	dataMem.address   = alu.result;
	dataMem.writeData = regs.readData2;
	dataMem.memWrite  = memWrite;
	dataMem.memRead   = memRead;


	// register writes
	if (regWrite)
	{
		if (regDst == 0)
			regs.writeRegister = rt;
		else
			regs.writeRegister = rs;
	}
	regs.regWrite = regWrite;
};



part RegisterFile
{
	public bit[ 5] readReg1, readReg2, writeRegister;
	public bit[32] writeData;
	pubilc bit     regWrite;

	public bit[32] readData1, readData2;

	memory(bit[32][32]) regs;

	readData1 = regs[readReg1];
	readData2 = regs[readReg2];

	if (regWrite)
		regs[writeRegister] = writeData;
};



part DataMemory
{
	public bit[32] address, writeData;
	public bit     memWrite, memRead;

	public bit[32] readData;


	memory(bit[32][DATA_MEMORY_SIZE/4]) dataMem;

	if (memRead | memWrite)
		assert(address % 4 == 0);

	if (memRead)
		readData = dataMem[address/4];
	if (memWrite)
		dataMem[address/4] = writeData;
};


