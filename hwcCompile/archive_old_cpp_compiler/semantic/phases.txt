Here are the semantic phases as I currently envision them:

PHASE 10

Build NameScope objects; populate them.  Convert parse tree to new form
(including converting all linked lists to arrays); add all implicit
subcomponents.

(Since the sizes of types are not yet known, the bit-space offsets cannot yet
be populated.)

This phase doesn't do very much semantic checking; we don't expect to report
many user errors here.

PHASE 20

In phase 20, we use the NameScope objects that we've built to do name lookups.
We look up both root names (the first IDENT in a dot chain), and also the IDENT
following dot expressions.  Since sizes and offsets are not yet known, the
expressions cannot be mapped all the way to offsets, but we store the
pointers to the NameScope entries for each such expression.

Additionally, in this phase, we find the *type* of each expression; is it a
boolean, integer, plug, etc?

This phase generates lots of user errors (undefined name).

PHASE 30

In phase 30, we calculate the size of every plugtype and part.  The process
iterates over all of the file-level declarations in the primary file, but
recurses through all of the types used in the entire system.  (When we
implement generics, this means that we will instantiate every copy of a
generic type; when we support multiple files, this means that not all types
might be instantiated.)

Since the recursive process can reach the same type by many paths, we will use
a flag to mark types that are already generated.  We will also have a flag to
indicate that a type is in-process, so that we can detect recursive
definitions.

The process can be cyclic (because of type() and sizeof() expressions); if a
cycle is detected, then the compile fails.

PHASE 35 (previously, part of phase 30)

Once we know the sizes of the various sub-types used by a type, we will fill
in the offsets for each declaration.

PHASE 40

In this phase, we verify that all of the indices used in index/slice
expressions are valid.  In the previous phase, we had already *used* these
indices to build expressions - but now, in this latter phase, we confirm that
these indices were valid.  (This may expose user errors.)

AFTER THIS, BUILD THE WIRING!

